---
apiVersion: v1
kind: Service
metadata:
  #name: redis-headless
  name: redis-cluster
  labels:
    app: redis
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
    - port: 6379
      name: server
      targetPort: 6379
  #clusterIP: None
  selector:
    app: redis
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis-config: |
    appendonly yes
    cluster-enabled yes
    cluster-config-file /var/lib/redis/nodes.conf
    cluster-node-timeout 5000
    dir /var/lib/redis
    port 6379
    requirepass password
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis-headless
  replicas: 6
  template:
    metadata:
      labels:
        app: redis
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      imagePullSecrets:
      - name: harborsecret
      serviceAccountName: redis-nfs-client-provisioner
      containers:
        - name: redis
          imagePullPolicy: IfNotPresent
          image: redis:latest
          command: [ "/bin/sh","-c","redis-server /etc/redis/redis.conf"]
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
          ports:
            - containerPort: 6379
              name: client-port
          ports:
            - containerPort: 16379
              name: cluster-port
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - "redis-cli -h $(hostname) ping"
            initialDelaySeconds: 15
            timeoutSeconds: 15
          livenessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - "redis-cli -h $(hostname) ping"
          volumeMounts:
            - name: "redis-conf"
              mountPath: "/etc/redis"
            - name: "redis-data"
              mountPath: "/var/lib/redis"
      volumes:
        - name: "redis-conf"
          configMap:
            name: "redis-config"
            items:
              - key: "redis-config"
                path: "redis.conf"
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        annotations:
          volume.beta.kubernetes.io/storage-class: "redis-managed-nfs-storage"
      spec:
        accessModes: [ "ReadWriteMany" ]
        resources:
          requests:
            storage: 5Gi
  selector:
    matchLabels:
      app: redis
